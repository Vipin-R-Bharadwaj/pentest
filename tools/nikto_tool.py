import os
import subprocess
import xml.etree.ElementTree as ET
from utils.file_utils import clean_xml_file
from tool_registry import register_tool

def run_command(cmd):
    process = subprocess.Popen(cmd, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = process.communicate()
    return stdout, stderr

def nikto_scan(endpoint):
    output_file = f'nikto_report_{endpoint.replace("://", "_").replace("/", "_")}.xml'
    cmd = f'nikto -h {endpoint} -C all -o {output_file} -Format xml'

    stdout, stderr = run_command(cmd)
    print(f"Nikto stdout: {stdout.decode('utf-8')}")
    print(f"Nikto stderr: {stderr.decode('utf-8')}")

    if not os.path.exists(output_file) or os.path.getsize(output_file) == 0:
        print(f"Error: Nikto output file '{output_file}' is missing or empty. Skipping this endpoint.")
        return {"findings": []}  # Return an empty result to avoid stopping the process

    try:
        # Clean and parse the XML file
        clean_xml_file(output_file)
        tree = ET.parse(output_file)
        root = tree.getroot()
        return parse_nikto_xml(root)
    except ET.ParseError as e:
        print(f"Error: Failed to parse Nikto output file '{output_file}' due to XML parsing error: {e}")
        return {"findings": []}  # Return an empty result to avoid stopping the process

def parse_nikto_xml(root):
    findings = []
    for item in root.findall(".//item"):
        finding = {
            "description": item.find("description").text if item.find("description") is not None else "No description",
            "uri": item.find("uri").text if item.find("uri") is not None else "No URI",
            "osvdb": item.find("osvdb").text if item.find("osvdb") is not None else "No OSVDB ID",
            "severity": item.find("severity").text if item.find("severity") is not None else "low"
        }
        findings.append(finding)
    return {"findings": findings}

def categorize_nikto_results(results, endpoint):
    categorized = {
        "low": [f"Nikto found issues on {endpoint}"]
    }
    return categorized

# Register the tool in the registry
register_tool('nikto', nikto_scan, categorize_nikto_results)