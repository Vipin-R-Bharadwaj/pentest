import json
import time
from zapv2 import ZAPv2
from urllib.parse import urlparse
from utils.tool_registry import register_tool
from utils.vulnerability_utils import merge_categorized_results
from utils.categorization_utils import categorize_vulnerabilities

import os
from dotenv import load_dotenv
from pathlib import Path

def initialize_variables():
    dotenv_path = Path('./.env')
    load_dotenv(dotenv_path=dotenv_path)

    ZAP_API_KEY = os.getenv('ZAP_API_KEY')
    ZAP_BASE = os.getenv('ZAP_BASE')
    return ZAPv2(apikey=ZAP_API_KEY, proxies={'http': ZAP_BASE, 'https': ZAP_BASE})

def ensure_url_scheme(url):
    parsed_url = urlparse(url)
    if not parsed_url.scheme:
        return 'https://' + url
    return url

def zap_scan(endpoint):
    endpoint = ensure_url_scheme(endpoint)
    
    zap = initialize_variables()
    zap.urlopen(endpoint)

    print("Spidering the target...")
    spider_scan_id = zap.spider.scan(endpoint)

    while int(zap.spider.status(spider_scan_id)) < 100:
        print(f"Spider progress: {zap.spider.status(spider_scan_id)}%")
        time.sleep(2)

    print("Spidering complete!")
    discovered_urls = zap.core.urls()

    if not discovered_urls:
        print(f"No URLs discovered for {endpoint}. Active scan won't proceed.")
        return None

    print("Starting active scan...")
    active_scan_id = zap.ascan.scan(endpoint)

    while int(zap.ascan.status(active_scan_id)) < 100:
        print(f"Active scan progress: {zap.ascan.status(active_scan_id)}%")
        time.sleep(5)

    print("Active scan complete!")
    alerts = zap.core.alerts(baseurl=endpoint)
    
    # # Save alerts to a file
    # output_file = f'zap_alerts_{endpoint.replace("://", "_").replace("/", "_")}.json'
    # with open(output_file, 'w') as f:
    #     json.dump(alerts, f, indent=4)  # Save alerts as formatted JSON
        
    return alerts

def categorize_zap_results(results):
    return categorize_vulnerabilities(results)

# Register the tool in the registry
register_tool('zaproxy', zap_scan, categorize_zap_results)