import time
from zapv2 import ZAPv2
from urllib.parse import urlparse
from tool_registry import register_tool

ZAP_API_KEY = 'jlfion5b8cmep7gsjesmpvgpqj'
ZAP_BASE = 'http://localhost:8080'
zap = ZAPv2(apikey=ZAP_API_KEY, proxies={'http': ZAP_BASE, 'https': ZAP_BASE})

def ensure_url_scheme(url):
    parsed_url = urlparse(url)
    if not parsed_url.scheme:
        return 'https://' + url
    return url

def zap_scan(endpoint):
    endpoint = ensure_url_scheme(endpoint)
    zap.urlopen(endpoint)

    print("Spidering the target...")
    spider_scan_id = zap.spider.scan(endpoint)

    while int(zap.spider.status(spider_scan_id)) < 100:
        print(f"Spider progress: {zap.spider.status(spider_scan_id)}%")
        time.sleep(2)

    print("Spidering complete!")
    discovered_urls = zap.core.urls()

    if not discovered_urls:
        print(f"No URLs discovered for {endpoint}. Active scan won't proceed.")
        return None

    print("Starting active scan...")
    active_scan_id = zap.ascan.scan(endpoint)

    while int(zap.ascan.status(active_scan_id)) < 100:
        print(f"Active scan progress: {zap.ascan.status(active_scan_id)}%")
        time.sleep(5)

    print("Active scan complete!")
    alerts = zap.core.alerts(baseurl=endpoint)
    return alerts

def categorize_zap_results(results, endpoint):
    categorized = {
        "high": [f"ZAP found vulnerabilities on {endpoint}"]
    }
    return categorized

# Register the tool in the registry
register_tool('zap', zap_scan, categorize_zap_results)