import requests

NVD_API_KEY = "9759843b-5615-44c2-a68f-b126e4d8d215"

# Function to map vulnerability to CVE using CWE ID or description
def map_to_cve(cweid=None, description=None):
    # Ensure valid CWE-ID is used
    if cweid and cweid != "0":  
        nvd_api_url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cweId=CWE-{cweid}"
    elif description:
        nvd_api_url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?keyword={description}"
    else:
        return None, None, None

    headers = {
        "apiKey": NVD_API_KEY
    }

    try:
        # Fetch the CVE data from NVD API
        response = requests.get(nvd_api_url, headers=headers)
        response.raise_for_status()
        cve_data = response.json()

        if cve_data.get('totalResults', 0) > 0:
            vulnerability = cve_data['vulnerabilities'][0]['cve']  # Adjusted to 'vulnerabilities'

            cve_id = vulnerability.get('id', 'N/A')

            # Extract CVSS v3 metrics if available
            cvss_v3_data = vulnerability.get('metrics', {}).get('cvssMetricV30', [])
            if cvss_v3_data:
                cvss_v3_score = cvss_v3_data[0]['cvssData'].get('baseScore', 'N/A')
                cvss_v3_vector = cvss_v3_data[0]['cvssData'].get('vectorString', 'N/A')
                cvss_v3_severity = cvss_v3_data[0]['cvssData'].get('baseSeverity', 'N/A')
            else:
                cvss_v3_score = 'N/A'
                cvss_v3_vector = 'N/A'
                cvss_v3_severity = 'N/A'

            # Extract CVSS v2 metrics if available
            cvss_v2_data = vulnerability.get('metrics', {}).get('cvssMetricV2', [])
            if cvss_v2_data:
                cvss_v2_score = cvss_v2_data[0]['cvssData'].get('baseScore', 'N/A')
                cvss_v2_vector = cvss_v2_data[0]['cvssData'].get('vectorString', 'N/A')
                cvss_v2_severity = cvss_v2_data[0]['cvssData'].get('baseSeverity', 'N/A')
            else:
                cvss_v2_score = 'N/A'
                cvss_v2_vector = 'N/A'
                cvss_v2_severity = 'N/A'

            # Get descriptions in English
            descriptions = vulnerability.get('descriptions', [])
            description = next((desc['value'] for desc in descriptions if desc['lang'] == 'en'), 'No description available')

            # Extract references to help fix the vulnerability
            references = vulnerability.get('references', [])
            reference_links = [ref.get('url') for ref in references]

            # Return all relevant information in a dictionary
            return {
                'cve_id': cve_id,
                'cvss_v3_score': cvss_v3_score,
                'cvss_v3_vector': cvss_v3_vector,
                'cvss_v3_severity': cvss_v3_severity,
                'cvss_v2_score': cvss_v2_score,
                'cvss_v2_vector': cvss_v2_vector,
                'cvss_v2_severity': cvss_v2_severity,
                'description': description,
                'references': reference_links
            }
        else:
            return {None, None, None}

    except requests.exceptions.RequestException as e:
        print(f"Error querying NVD: {e}")
        return {None, None, None}

# Function to categorize vulnerabilities based on risk and CVSS score
def categorize_vulnerabilities(alerts):
    categorized = {
        "critical": [],
        "high": [],
        "medium": [],
        "low": [],
        "informational": []
    }

    for alert in alerts:
        risk = alert['risk'].lower()
        description = alert['description']
        cweid = alert.get('cweid', None)

        # Map to CVE and get CVSS score
        cve_id, cvss_score, severity = map_to_cve(cweid=cweid, description=description)

        if severity:
            # Use CVSS severity if available
            severity_category = severity.lower()
        else:
            # Fallback to risk level in ZAP alert
            severity_category = risk

        # Categorize by severity
        if severity_category == 'critical':
            categorized['critical'].append(f"Alert: {alert['alert']} | CVE: {cve_id} | CVSS: {cvss_score}")
        elif severity_category == 'high':
            categorized['high'].append(f"Alert: {alert['alert']} | CVE: {cve_id} | CVSS: {cvss_score}")
        elif severity_category == 'medium':
            categorized['medium'].append(f"Alert: {alert['alert']} | CVE: {cve_id} | CVSS: {cvss_score}")
        elif severity_category == 'low':
            categorized['low'].append(f"Alert: {alert['alert']} | CVE: {cve_id} | CVSS: {cvss_score}")
        else:
            categorized['informational'].append(f"Alert: {alert['alert']} | CVE: {cve_id} | CVSS: {cvss_score}")

    return categorized
