import requests

def get_cvss_score(cve_id):
    """
    Fetch the CVSS score for a given CVE ID from the NVD API.
    """
    url = f"https://services.nvd.nist.gov/rest/json/cve/1.0/{cve_id}"
    try:
        response = requests.get(url)
        data = response.json()

        # Check if CVSSv3 data is available, fallback to CVSSv2 otherwise
        if 'impact' in data['result']['CVE_Items'][0]:
            impact = data['result']['CVE_Items'][0]['impact']
            if 'baseMetricV3' in impact:
                return impact['baseMetricV3']['cvssV3']['baseScore']
            elif 'baseMetricV2' in impact:
                return impact['baseMetricV2']['cvssV2']['baseScore']
        return None
    except Exception as e:
        print(f"Error fetching CVSS score for {cve_id}: {e}")
        return None

def merge_categorized_results(final_categorized, cve_id=None, description=None):
    """
    Merges a vulnerability into the final categorized results.
    If a CVE ID is provided, the CVSS score will be looked up.
    Otherwise, the description will be categorized as 'info'.
    """

    # Initialize categories if they haven't been initialized already
    if not final_categorized:
        final_categorized.update({
            "critical": [],
            "high": [],
            "medium": [],
            "low": [],
            "info": []
        })

    print(f'Type: {type(cve_id)}, cvd_id: {cve_id}')

    # If a CVE ID is provided, fetch the CVSS score
    if cve_id and isinstance(cve_id, str) and cve_id.strip():
        cvss_score = get_cvss_score(cve_id)
        if cvss_score:
            if cvss_score >= 9.0:
                final_categorized['critical'].append(f"Vulnerability {cve_id} - CVSS Score: {cvss_score}")
            elif cvss_score >= 7.0:
                final_categorized['high'].append(f"Vulnerability {cve_id} - CVSS Score: {cvss_score}")
            elif cvss_score >= 4.0:
                final_categorized['medium'].append(f"Vulnerability {cve_id} - CVSS Score: {cvss_score}")
            else:
                final_categorized['low'].append(f"Vulnerability {cve_id} - CVSS Score: {cvss_score}")
        else:
            final_categorized['info'].append(f"Vulnerability {cve_id} has no CVSS score available.")
    # If no CVE ID, just add it as an informational vulnerability
    else:
        final_categorized['info'].append(f"Description: {description}")

    return final_categorized
