from tool_registry import get_scan_function, get_categorize_function
from utils.file_utils import read_endpoints
from utils.report_utils import generate_markdown_report

# Import the tools to ensure they are registered
import tools.nmap_tool
import tools.nikto_tool
import tools.zaproxy_tool


def pentest(file_path, tools):
    endpoints = read_endpoints(file_path)
    
    for endpoint in endpoints:
        print(f"Scanning {endpoint}...\n")
        
        scan_results = {}
        for tool in tools:
            scan_func = get_scan_function(tool)
            if scan_func:
                scan_results[tool] = scan_func(endpoint)
            else:
                print(f"Warning: Tool '{tool}' is not registered.")
        
        categorized_results = categorize_vulnerabilities(scan_results, endpoint)
        
        report = generate_markdown_report(endpoint, categorized_results)
        
        with open(f"{endpoint.replace('.', '_')}_vapt_report.md", 'w') as f:
            f.write(report)
        print(f"Report for {endpoint} generated successfully!\n")

def categorize_vulnerabilities(tool_results, endpoint):
    """
    Dynamically categorize results from any registered tools.
    """
    final_categorized = {
        "critical": [],
        "high": [],
        "medium": [],
        "low": [],
        "info": []
    }
    
    for tool, results in tool_results.items():
        categorize_func = get_categorize_function(tool)
        if categorize_func and results:
            categorized = categorize_func(results, endpoint)
            merge_categorized_results(final_categorized, categorized)
    
    return final_categorized

def merge_categorized_results(final_categorized, new_categorized):
    """
    Merges categorized results from different tools into the final result.
    """
    for level, findings in new_categorized.items():
        final_categorized[level].extend(findings)

if __name__ == "__main__":
    import sys

    if len(sys.argv) < 3:
        print("Usage: python pentest.py <path_to_file_of_endpoints> <tools>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    tools = sys.argv[2:]  # List of tools from the command line

    pentest(file_path, tools)
