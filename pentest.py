import importlib
from utils.tool_registry import get_scan_function, get_categorize_function, tool_registry
from utils.file_utils import read_endpoints, generate_markdown_report, create_report


def pentest(file_path, tools):
    endpoints = read_endpoints(file_path)
    
    for endpoint in endpoints:
        print(f"Scanning {endpoint}...\n")

        
        scan_results = {}
        for tool in tools:
            # Import the specific tool
            importlib.import_module(f'tools.{tool}_tool')

            print(f"tool_registry: {tool_registry}")
            scan_func = get_scan_function(tool)
            if scan_func:
                print(f"Running {tool} on {endpoint}...")
                scan_results[tool] = scan_func(endpoint)
            else:
                print(f"Warning: Tool '{tool}' is not registered.")

            post_pentest_process(endpoint, scan_results)


def post_pentest_process(endpoint, scan_results):
    categorized_results = categorize_vulnerabilities(scan_results)
    report_data = generate_markdown_report(endpoint, categorized_results)

    if create_report(endpoint.replace('.', '_'), report_data):
        print(f"Report for {endpoint} generated successfully!\n")
    else:
        print(f"Error Encountered while generating report!")


def categorize_vulnerabilities(tool_results):
    """
    Dynamically categorize results from any registered tools.
    The final categorized results are handled in merge_categorized_results.
    """
    final_categorized = {}

    # For each tool, invoke the respective categorize function and merge results
    for tool, results in tool_results.items():
        categorize_func = get_categorize_function(tool)
        if categorize_func and results:
            # Call the tool-specific categorize function
            final_categorized = categorize_func(results)

            # # Merge results into final categorized list using the utility function
            # for category, findings in tool_categorized.items():
            #     merge_categorized_results(final_categorized, category, findings)

    return final_categorized
